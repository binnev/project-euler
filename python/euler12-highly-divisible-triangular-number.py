# Highly divisible triangular number

"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""

from python.tools.primes import nonprime_factors, prime_factors, product, better_nonprime_factors
from python.tools.utils import profile


@profile
def euler12old():
    triangle = 1
    ii = 2
    factors = []

    while len(factors) < 500:
        factors = nonprime_factors(triangle)
        if len(factors) > 500:
            return triangle
        triangle += ii
        ii += 1


def num_divisors(N):
    """
    for N = 28:
            prime factors
            2   7
            exponents
    1   =   0   0   (2**0 * 7**0)
    2   =   1   0
    4   =   2   0
    7   =   0   1
    14  =   1   1
    28  =   2   1

    The number of divisors = the product of the prime factors' max powers = 6 ((2+1) * (1+1))
    """
    return product(power + 1 for power in prime_factors(N).values())


@profile
def euler12better():
    triangle = 1
    ii = 2
    while True:
        if num_divisors(triangle) > 500:
            return triangle
        triangle += ii
        ii += 1


if __name__ == "__main__":
    assert euler12old() == 76576500
    assert euler12better() == 76576500

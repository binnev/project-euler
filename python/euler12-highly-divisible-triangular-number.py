# Highly divisible triangular number

"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""
import time

from python.tools.utils import profile


def nonprime_factors(number):
    factors = set()
    naturals = range(1, number + 1)
    for n in naturals:
        if number % n == 0:
            if (n in factors) and (int(number / n) in factors):
                break
            factors.add(n)
            factors.add(int(number / n))
        if n > number:
            break
    return factors


@profile
def euler12():
    start = time.time()
    triangle = 1
    ii = 2
    factors = []

    while len(factors) < 500:
        factors = nonprime_factors(triangle)
        if len(factors) > 500:
            return triangle
        triangle += ii
        ii += 1

    end = time.time()
    print("elapsed time = ", end - start)


if __name__ == "__main__":
    assert euler12() == 76576500
